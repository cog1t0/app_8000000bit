<div class="max-w-3xl mx-auto p-6 bg-white rounded-lg shadow-lg mt-10">
  <h1 class="text-3xl font-bold text-center mb-8">
    Hello from 8000000bit.app 👋
  </h1>
  
  <div class="mb-6 p-4 bg-gray-50 rounded-md">
    <h2 class="text-xl font-semibold mb-3">あなたの情報</h2>
    <div id="first-visit" class="mb-2">初回アクセス日: <span class="font-medium">読み込み中...</span></div>
    <div id="location-info" class="mb-2">位置情報: <span class="font-medium">読み込み中...</span></div>
    <div id="address-info" class="mb-2">訪問場所: <span class="font-medium">未取得</span></div>
  </div>
  
  <div id="location-container" class="text-center">
    <div id="location-prompt" class="mb-4 hidden">
      <p class="text-gray-700 mb-2">初回訪問の記念として、あなたが最初にこのサイトを訪れた場所を記録しませんか？</p>
      <p class="text-sm text-gray-500 mb-3">この情報はあなたのデバイスにのみ保存され、一度だけ記録されます。</p>
      <button id="get-location" class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
        </svg>
        記念に現在地を記録する
      </button>
    </div>
    <p id="location-status" class="text-sm text-gray-600"></p>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // 初回アクセス日の管理
    const firstVisitElement = document.getElementById('first-visit');
    const firstVisitDate = localStorage.getItem('8000000bit_first_visit');
    
    if (!firstVisitDate) {
      // 初回アクセスの場合は現在の日時を保存
      const now = new Date();
      const formattedDate = now.toLocaleString('ja-JP');
      localStorage.setItem('8000000bit_first_visit', formattedDate);
      firstVisitElement.querySelector('span').textContent = formattedDate + ' (今回が初めてのアクセスです)';
    } else {
      // 過去にアクセスしたことがある場合
      firstVisitElement.querySelector('span').textContent = firstVisitDate;
    }
    
    // 位置情報と住所の取得と表示
    const locationElement = document.getElementById('location-info');
    const addressElement = document.getElementById('address-info');
    const locationButton = document.getElementById('get-location');
    const locationStatus = document.getElementById('location-status');
    const locationPrompt = document.getElementById('location-prompt');
    
    // 保存済みの位置情報があれば表示
    const savedLocation = localStorage.getItem('8000000bit_location');
    const savedAddress = localStorage.getItem('8000000bit_address');
    
    if (savedLocation) {
      // すでに位置情報が保存されている場合
      locationElement.querySelector('span').textContent = savedLocation;
      locationStatus.textContent = '🎖 あなたが初めてこのサイトを訪れた場所が記録されています';
      
      // 住所も表示
      if (savedAddress) {
        addressElement.querySelector('span').textContent = savedAddress;
      } else {
        // 位置情報はあるが住所がない場合（古いバージョンからの移行）
        addressElement.querySelector('span').textContent = '変換中...';
        const coords = savedLocation.match(/緯度: ([\d.]+), 経度: ([\d.]+)/);
        if (coords && coords.length === 3) {
          const latitude = coords[1];
          const longitude = coords[2];
          
          // 非同期で住所を取得
          getAddressFromCoordinates(latitude, longitude).then(address => {
            localStorage.setItem('8000000bit_address', address);
            addressElement.querySelector('span').textContent = address;
          });
        }
      }
    } else {
      // 位置情報がまだ保存されていない場合
      locationElement.querySelector('span').textContent = '未記録';
      addressElement.querySelector('span').textContent = '未記録';
      locationPrompt.classList.remove('hidden'); // 位置情報取得の案内を表示
    }
    
    // 住所を取得する関数
    async function getAddressFromCoordinates(latitude, longitude) {
      try {
        // OpenStreetMapのNominatim APIを使用（利用規約に注意）
        const response = await fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${latitude}&lon=${longitude}&zoom=18&addressdetails=1&accept-language=ja`);
        const data = await response.json();
        
        // 応答から住所を抽出
        if (data && data.display_name) {
          return data.display_name;
        } else {
          return '住所の取得に失敗しました';
        }
      } catch (error) {
        console.error('住所の変換エラー:', error);
        return '住所の変換中にエラーが発生しました';
      }
    }
    
    // 位置情報取得ボタンのイベントリスナー
    locationButton.addEventListener('click', function() {
      if (navigator.geolocation) {
        locationElement.querySelector('span').textContent = '取得中...';
        addressElement.querySelector('span').textContent = '取得中...';
        locationButton.disabled = true;
        locationButton.classList.add('opacity-50');
        locationStatus.textContent = '位置情報を取得しています...';
        
        navigator.geolocation.getCurrentPosition(
          // 成功時
          async function(position) {
            const latitude = position.coords.latitude.toFixed(6);
            const longitude = position.coords.longitude.toFixed(6);
            const locationText = `緯度: ${latitude}, 経度: ${longitude}`;
            
            // 位置情報をローカルストレージに保存（一度だけ）
            localStorage.setItem('8000000bit_location', locationText);
            locationElement.querySelector('span').textContent = locationText;
            
            // 住所を取得中のメッセージ
            addressElement.querySelector('span').textContent = '場所を特定しています...';
            locationStatus.textContent = '現在地の住所情報を取得しています...';
            
            // 住所を取得して表示
            const address = await getAddressFromCoordinates(latitude, longitude);
            localStorage.setItem('8000000bit_address', address);
            addressElement.querySelector('span').textContent = address;
            
            // 取得が完了したらプロンプトを非表示にして成功メッセージを表示
            locationPrompt.classList.add('hidden');
            locationStatus.textContent = '🎉 記念に現在地を記録しました！この記録は今後のアクセスでも見ることができます';
          },
          // 失敗時
          function(error) {
            let errorMessage;
            switch(error.code) {
              case error.PERMISSION_DENIED:
                errorMessage = '位置情報の使用が許可されませんでした';
                break;
              case error.POSITION_UNAVAILABLE:
                errorMessage = '現在地を特定できませんでした';
                break;
              case error.TIMEOUT:
                errorMessage = '位置情報の取得に時間がかかりすぎました';
                break;
              default:
                errorMessage = '不明なエラーが発生しました';
            }
            locationElement.querySelector('span').textContent = errorMessage;
            addressElement.querySelector('span').textContent = '取得できませんでした';
            
            // エラー時はボタンを有効に戻して再試行可能にする
            locationButton.disabled = false;
            locationButton.classList.remove('opacity-50');
            locationStatus.textContent = '再度試してみてください。または、このまま記録なしで続けることもできます。';
          }
        );
      } else {
        locationElement.querySelector('span').textContent = 'お使いのブラウザでは対応していません';
        addressElement.querySelector('span').textContent = '取得できません';
        locationStatus.textContent = 'お使いのブラウザでは位置情報を取得できないため、記録は残せません。';
      }
    });
  });
</script>